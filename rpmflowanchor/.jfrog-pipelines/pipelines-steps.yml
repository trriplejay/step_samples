# integrations must be created from the pipelines UI BEFORE adding this pipeline
integrationDetails:
  # Artifactory
  artifactoryIntegrationName: &artIntName 'art'
  # Distribution
  distributionIntegrationName: &distIntName 'int_distribution'
  # IncomingWebhook
  webhookIntegrationName:  &whIntName 'rpm_dev_local_hook'

# Artifactory repositories should also be created in the Artifactory UI before executing this pipeline
artifactoryRepositories:
  # the virtual repo the encompasses the remote RPM
  virtualRPMRpoName: &virtualRepoName 'pip-rpm-virtual'
  # the first level repository holding a mirror of the remote
  devRPMRepoName: &devRepoName 'pip-rpm-dev-local'
  # the "production" repository to hold packages promoted from dev repo
  prodRPMRepoName: &prodRepoName 'pip-rpm-prod-local'

pipelinesDetails:
  # a name for the pipeline. Must be unique in the system
  name: &pipelineName 'rpm_promote_and_publish'

# resources must have unique names across the system, since they can be shared by
# different pipelines
resourceDetails:
  # this is for an IncomingWehbook resource.
  # this expects a payload that contains an array of strings called "file_list"
  # each file should be a full artifactory path in the virtual repository that the user
  # wants to cache in the dev repo and then potentially promote to prod and distribute
  ### example payload
  # {"file_list": ["pipe-rpm-virtual/a.rpm","pip-rpm-virtual/b.rpm"]}
  # The URL to send the payload to can be found on the details page for the webhook integration
  webhookResourceName: &whResName 'package_hook'

  # the name of the BuildInfo resource to hold build information from the dev repository
  devRepoBuildInfoName: &devRepoBuildInfoName 'dev_repo_buildinfo'

  # the name of the BuildInfo resource to hold information after the dev build is promoted to production
  prodRepoBuildInfoName: &prodRepoBuildInfoName 'prod_repo_buildinfo'

  # the name of the ReleaseBundle resource that is created to contain the artifacts from file_list
  prodRepoBundleName: &prodRepoBundle 'prod_repo_bundle'

  # These resources contains the rules for distribution. In this example
  # distribution is split between 2 sites, so each site has its own "DistributionRule" resource
  primarySiteDistRuleName: &siteARuleName 'site_A_rule'
  secondarySiteDistRuleName: &siteBRuleName 'site_B_rule'


promotion:
  # the friendly name of the build getting published to Artifactory
  buildName: &buildName 'rpm_build'


releaseBundle:
  # The name of your release. This will appear in the distribution UI
  releaseName: &releaseName 'pip_rpm_prod_bundle'


distribution:
  primarySiteName: &siteAName 'siteA'

  secondarySiteName: &siteBName 'siteB'



resources:
  - name: *whResName
    type: IncomingWebhook
    configuration:
      webhookName: *whIntName

  - name: *devRepoBuildInfoName
    type: BuildInfo
    configuration:
      sourceArtifactory: *artIntName
  - name: *prodRepoBuildInfoName
    type: BuildInfo
    configuration:
      sourceArtifactory: *artIntName

  - name: *prodRepoBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: *distIntName
      name: *releaseName
      version: 1.0.${run_id}

  - name: *siteARuleName
    type: DistributionRule
    configuration:
      sourceDistribution: *distIntName
      serviceName: "*"
      siteName: *siteAName
      cityName: "*"
      countryCodes:
        - "*"
  - name: *siteBRuleName
    type: DistributionRule
    configuration:
      sourceDistribution: *distIntName
      serviceName: "*"
      siteName: *siteBName
      cityName: "*"
      countryCodes:
        - "*"

pipelines:
  - name: *pipelineName
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: *buildName
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:

      - name: create_dev_build
        type: Bash
        configuration:
          environmentVariables:
            devRepoName: *devRepoName
            virtualRepoName: *virtualRepoName
            hookName: *whResName
            artIntName: *artIntName
            buildInfoName: *devRepoBuildInfoName
          inputResources:
            - name: *whResName
          outputResources:
            - name: *devRepoBuildInfoName
          integrations:
            - name: *artIntName
        execution:
          onExecute:
            - echo "$(find_resource_variable ${hookName} payload)" | jq '.' > payload.json
            - cat payload.json
            - export file_list=$(read_json payload.json "file_list")
            - echo "$file_list"
            - file_count=$(jq '. | length' <<< $file_list)
            - echo "file count is $file_count"
            - if [ -z "$file_count" ]; then end_step failure; fi
            - art_url="$(eval echo \"\${int_${artIntName}_url}\")"
            - art_apikey="$(eval echo \"\${int_${artIntName}_apikey}\")"
            - art_user="$(eval echo \"\${int_${artIntName}_username}\")"
            - |
              AQL1="items.find ({\"\$or\":[{"
              AQL2=""
              for item in $(jq -r '.[]' <<< $file_list); do
                echo "cache the file from virtual to local dev"
                curl -u $art_user:$art_apikey -I $art_url/$item
                newPath=${item#"$virtualRepoName"}
                newPath="${devRepoName}${newPath}"
                echo "copying to local at $newPath"
                jf rt copy $item $devRepoName
                IREPO=$(echo "$newPath" | cut -d "/" -f1)
                IPATH=$(dirname "$newPath" | cut -d "/" -f 2-)
                INAME=$(basename "$newPath")
                AQL2="${AQL2}\"\$and\":[{\"repo\":\"${IREPO}\",\"path\":\"${IPATH}\", \"name\":\"${INAME}\"}],"
                jf rt sp $newPath "build.name=${JFROG_CLI_BUILD_NAME};build.number=${JFROG_CLI_BUILD_NUMBER}"
              done
            - |
              AQL2=`echo ${AQL2} | rev | cut -c2- | rev`
              AQL3='}],"type":"file"}).include("actual_md5", "name")'
              AQL="${AQL1}${AQL2}${AQL3}"
              RES=`jf rt curl -XPOST -H "Content-Type: text/plain" -d "$AQL" api/search/aql --silent | jq '[.results[] | .["md5"] = .actual_md5 | del(.actual_md5)]' `
              BST=`date +"%Y-%m-%dT%H:%M:%S.000%z"`
              BUILD_HEADER="{ \"version\":\"1.0.1\", \"name\":\"${JFROG_CLI_BUILD_NAME}\", \"number\":\"${JFROG_CLI_BUILD_NUMBER}\", \"type\":\"GENERIC\", \"started\":\"${BST}\", \"modules\": [{ \"id\":\"rpms\",\"type\":\"generic\", \"artifacts\":"
              BUILD_FOOTER="}]}"
              BUILDINFO="${BUILD_HEADER}$RES${BUILD_FOOTER}"
              echo $BUILDINFO
              jf rt curl -H 'Content-Type:application/json' -d "$BUILDINFO"  -XPUT /api/build?project=$project_key

          onSuccess:
            - write_output ${buildInfoName} "buildName=${JFROG_CLI_BUILD_NAME}" "buildNumber=${JFROG_CLI_BUILD_NUMBER}"

      - name: promote_build
        type: PromoteBuild
        configuration:
          requiresApproval: true
          copy: true
          targetRepository: *prodRepoName
          inputResources:
            - name: *devRepoBuildInfoName
          outputResources:
            - name: *prodRepoBuildInfoName

      - name: create_bundle
        type: CreateReleaseBundle
        configuration:
          sign: true
          releaseBundleName: *releaseName
          releaseBundleVersion: ${run_id}
          dryRun: false
          inputResources:
            - name: *prodRepoBuildInfoName
          outputResources:
            - name: *prodRepoBundle

      - name: distribute_site_a
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: *siteARuleName
            - name: *prodRepoBundle
              trigger: false

      - name: distribute_site_b
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: *siteBRuleName
            - name: *prodRepoBundle
              trigger: false

