template: true
valuesFilePath: ./values.yml

pipelines:
  - name: {{ default "" .Values.devRepoName | replace "-" "_" }}_promote_and_publish
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: {{ .Values.devRepoName }}
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:
      - name: create_dev_build
        type: Bash
        configuration:
          environmentVariables:

            FILE_NAME:
              description: Name of the file to include in the build
              default: test.rpm
              allowCustom: true
          inputResources:
            - name: artifactHook
          outputResources:
            - {{ default "" .Values.devRepoName | replace "-" "_" }}_buildInfo
        execution:
          onExecute:
            - if [ -n "$FILE_NAME" ]; then echo "creating build for artifact named $FILE_NAME"; fi
            - |               
                LINES=$(jq -r  '.' ${INPUT_FILE} | tr -d '[],"')
                AQL1="items.find ({\"\$or\":[{"
                AQL2=""
                for i in $LINES; do
                IREPO=$(echo "$i" | cut -d "/" -f1)
                IPATH=$(dirname "$i" | cut -d "/" -f 2-)
                INAME=$(basename "$i")
                AQL2="${AQL2}\"\$and\":[{\"repo\":\"${IREPO}\",\"path\":\"${IPATH}\", \"name\":\"${INAME}\"}],"
                jf rt sp $i "build.name=${JFROG_CLI_BUILD_NAME};build.number=${JFROG_CLI_BUILD_NUMBER}"
                done
                AQL2=`echo ${AQL2} | rev | cut -c2- | rev`
                AQL3='}],"type":"file"}).include("actual_md5", "name")'
                AQL="${AQL1}${AQL2}${AQL3}"
                RES=`jf rt curl -XPOST -H "Content-Type: text/plain" -d "$AQL" api/search/aql --silent | jq '[.results[] | .["md5"] = .actual_md5 | del(.actual_md5)]' `
                BST=`date +"%Y-%m-%dT%H:%M:%S.000%z"`
                BUILD_HEADER="{ \"version\":\"1.0.1\", \"name\":\"${JFROG_CLI_BUILD_NAME}\", \"number\":\"${JFROG_CLI_BUILD_NUMBER}\", \"type\":\"GENERIC\", \"started\":\"${BST}\", \"modules\": [{\"id\":\"rpms\",\"type\":\"generic\",\"artifacts\":"BUILD_FOOTER="}]}"
                BUILDINFO="${BUILD_HEADER}$RES${BUILD_FOOTER}"
                echo $BUILDINFO
                jf rt curl -H 'Content-Type:application/json' -d "$BUILDINFO"  -XPUT /api/build
      - name: promote_build
        type: PromoteBuild
        configuration:
          requiresApproval: true
          targetRepository: {{ default "" .Values.prodRepoName | replace "-" "_" }}
          inputResources:
            - name: {{ default "" .Values.devRepoName | replace "-" "_" }}_buildInfo
          outputResources:
            - name: {{ default "" .Values.prodRepoName | replace "-" "_" }}_buildInfo
      - name: create_bundle
        type: CreateReleaseBundle
        configuration:
          sign: true
          releaseBundleName: {{ .Values.prodRepoName }}
          releaseBundleVersion: ${run_id}
          dryRun: false
          inputResources:
            - name: {{ default "" .Values.prodRepoName | replace "-" "_" }}_buildInfo
          outputResources:
            - name: {{ default "" .Values.prodRepoName | replace "-" "_" }}_bundle
      - name: distribute_site_a
        type: DistributeBundle
        configuration:
          dryRun: false
          inputResources:
            - name:
            - name: {{ default "" .Values.prodRepoName | replace "-" "_" }}_bundle
      - name: distribute_site_b
        type: DistributeBundle
        configuration:
          dryRun: false
          inputResources:
            - name: {{ default "" .Values.prodRepoName | replace "-" "_" }}_bundle

