
resources:
  - name: package_hook
    type: IncomingWebhook
    configuration:
      webhookName: rpm_dev_local_hook

  - name: dev_repo_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
  - name: prod_repo_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art

  - name: prod_repo_bundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: int_distribution
      name: pip_rpm_prod_bundle
      version: 1.0.${run_id}

  - name: site_A_rule
    type: DistributionRule
    configuration:
      sourceDistribution: int_distribution
      serviceName: "*"
      siteName: siteA
      cityName: "*"
      countryCodes:
        - "*"
  - name: site_B_rule
    type: DistributionRule
    configuration:
      sourceDistribution: int_distribution
      serviceName: "*"
      siteName: siteB
      cityName: "*"
      countryCodes:
        - "*"

pipelines:
  - name: rpm_promote_and_publish
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: rpm_build
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:

      - name: create_dev_build
        type: Bash
        configuration:
          environmentVariables:
            remoteRepoName: pip-rpm-remote
            devRepoName: pip-rpm-dev-local
            virtualRepoName: pip-rpm-virtual
          inputResources:
            - name: package_hook
          outputResources:
            - name: dev_repo_buildinfo
          integrations:
            - name: art
        execution:
          onExecute:
            - echo "hello world"
            - echo "$(find_resource_variable package_hook payload)" | jq '.' > payload.json
            - cat payload.json
            - export file_list=$(read_json payload.json "file_list")
            - echo "$file_list"
#            - |
#                for item in
#                  echo "processing $item"
#                  echo "caching in remote"
#                  curl -u $int_art_username:$int_art_apikey -I $int_art_url/$item
#                  newPath=${item#"$virtualRepoName"}
#                  newPath="${devRepoName}${newPath}"
#                  echo "copying to local at $newPath"
#                  jf rt copy $item $devRepoName
#                  echo "add local to build info"
#                  jf rt dl $newPath --flat
#                done
            - |
                AQL1="items.find ({\"\$or\":[{"
                AQL2=""
                for item in $(jq -r '.[]' <<< $file_list); do
                  echo "cache the file from virtual to local dev"
                  curl -u $int_art_username:$int_art_apikey -I $int_art_url/$item
                  newPath=${item#"$virtualRepoName"}
                  newPath="${devRepoName}${newPath}"
                  echo "copying to local at $newPath"
                  jf rt copy $item $devRepoName
                  IREPO=$(echo "$newPath" | cut -d "/" -f1)
                  IPATH=$(dirname "$newPath" | cut -d "/" -f 2-)
                  INAME=$(basename "$newPath")
                  AQL2="${AQL2}\"\$and\":[{\"repo\":\"${IREPO}\",\"path\":\"${IPATH}\", \"name\":\"${INAME}\"}],"
                  jf rt sp $newPath "build.name=${JFROG_CLI_BUILD_NAME};build.number=${JFROG_CLI_BUILD_NUMBER}"
                done
            - |               
                AQL2=`echo ${AQL2} | rev | cut -c2- | rev`
                AQL3='}],"type":"file"}).include("actual_md5", "name")'
                AQL="${AQL1}${AQL2}${AQL3}"
                RES=`jf rt curl -XPOST -H "Content-Type: text/plain" -d "$AQL" api/search/aql --silent | jq '[.results[] | .["md5"] = .actual_md5 | del(.actual_md5)]' `
                BST=`date +"%Y-%m-%dT%H:%M:%S.000%z"`
                BUILD_HEADER="{ \"version\":\"1.0.1\", \"name\":\"${JFROG_CLI_BUILD_NAME}\", \"number\":\"${JFROG_CLI_BUILD_NUMBER}\", \"type\":\"GENERIC\", \"started\":\"${BST}\", \"modules\": [{ \"id\":\"rpms\",\"type\":\"generic\", \"artifacts\":"
                BUILD_FOOTER="}]}"
                BUILDINFO="${BUILD_HEADER}$RES${BUILD_FOOTER}"
                echo $BUILDINFO
                jf rt curl -H 'Content-Type:application/json' -d "$BUILDINFO"  -XPUT /api/build?project=$project_key

          onSuccess:
            - write_output dev_repo_buildinfo "buildName=${JFROG_CLI_BUILD_NAME}" "buildNumber=${JFROG_CLI_BUILD_NUMBER}"

      - name: promote_build
        type: PromoteBuild
        configuration:
          requiresApproval: true
          copy: true
          targetRepository: pip-rpm-prod-local
          inputResources:
            - name: dev_repo_buildinfo
          outputResources:
            - name: prod_repo_buildinfo

      - name: create_bundle
        type: CreateReleaseBundle
        configuration:
          sign: true
          releaseBundleName: prod_repo_bundle
          releaseBundleVersion: ${run_id}
          dryRun: false
          inputResources:
            - name: prod_repo_buildinfo
          outputResources:
            - name: prod_repo_bundle

      - name: distribute_site_a
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: site_A_rule
            - name: prod_repo_bundle
              trigger: false

      - name: distribute_site_b
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: site_B_rule
            - name: prod_repo_bundle
              trigger: false

