
resources:
  - name: cache_files_bag
    type: PropertyBag
    configuration:
      cache_files:
        - test1
        - test2
  - name: package_hook
    type: IncomingWebhook
    configuration:
      webhookName: rpm_dev_local_hook

  - name: dev_repo_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
  - name: prod_repo_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art

  - name: prod_repo_bundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: int_distribution
      name: pip_rpm_prod_bundle
      version: 1.0.${run_id}

  - name: site_A_rule
    type: DistributionRule
    configuration:
      sourceDistribution: int_distribution
      serviceName: "*"
      siteName: siteA
      cityName: "*"
      countryCodes:
        - "*"
  - name: site_B_rule
    type: DistributionRule
    configuration:
      sourceDistribution: int_distribution
      serviceName: "*"
      siteName: siteB
      cityName: "*"
      countryCodes:
        - "*"

pipelines:
  - name: rpm_promote_and_publish
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: rpm_build
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:
      - name: cache_dependency
        type: Bash
        configuration:
          environmentVariables:
            remoteRepoName: pip-rpm-remote
            devRepoName: pip-rpm-dev-local
            cacheBagName: cache_files_bag
          integrations:
            - name: art
          inputResources:
            - name: package_hook
          outputResources:
            - name: cache_files_bag
        execution:
          onExecute:
            - echo "hello world"
            - echo "$(find_resource_variable package_hook payload)" | jq '.' > payload.json
            - export file_list=$(read_json payload.json "files")
            - echo "caching from ${remoteRepoName} to ${devRepoName}
          onSuccess:
            - echo "writing to cache_files_bag"
            - write_output cache_files_bag "files=${file_list}"

      - name: create_dev_build
        type: Bash
        configuration:
          environmentVariables:
            BIResName: dev_repo_buildinfo
          inputSteps:
            - name: cache_dependency
          inputResources:
            - name: cache_files_bag
          outputResources:
            - name: dev_repo_buildinfo
          integrations:
            - name: art
        execution:
          onExecute:
            - if [ -n "$FILE_NAME" ]; then echo "creating build for artifact named $FILE_NAME"; fi
          onComplete:
            - write_output ${BIResName} "buildName=${JFROG_CLI_BUILD_NAME}" "buildNumber=${JFROG_CLI_BUILD_NUMBER}"

      - name: promote_build
        type: PromoteBuild
        configuration:
          requiresApproval: true
          copy: true
          targetRepository: pip-rpm-prod-local
          inputResources:
            - name: dev_repo_buildinfo
          outputResources:
            - name: prod_repo_buildinfo

      - name: create_bundle
        type: CreateReleaseBundle
        configuration:
          sign: true
          releaseBundleName: prod_repo_bundle
          releaseBundleVersion: ${run_id}
          dryRun: false
          inputResources:
            - name: prod_repo_buildinfo
          outputResources:
            - name: prod_repo_bundle

      - name: distribute_site_a
        type: DistributeBundle
        configuration:
          dryRun: false
          inputResources:
            - name: site_A_rule
            - name: prod_repo_bundle
              trigger: false

      - name: distribute_site_b
        type: DistributeBundle
        configuration:
          dryRun: false
          inputResources:
            - name: site_B_rule
            - name: prod_repo_bundle
              trigger: false

